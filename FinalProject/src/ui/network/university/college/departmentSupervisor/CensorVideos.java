/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.network.university.college.departmentSupervisor;

import biz.account.Account;
import biz.org.Organization;
import biz.role.supervisorRole.UniversityDepartmentSupervisorRole;
import biz.video.Video;
import biz.video.VideoCatalog;
import java.util.stream.Stream;
import ui.components.HasTitle;
import ui.components.TablePopulatable;

import javax.swing.*;
import ui.components.ParentUI;

/**
 *
 * @author royn
 */
public class CensorVideos extends javax.swing.JPanel implements TablePopulatable<Video>, HasTitle {
    private ParentUI parent;
    private Account account;
        
    /**
     * Creates new form NewJPanel
     */
    public CensorVideos(ParentUI parent, Account account) {
        this.parent = parent;
        this.account = account;
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnView = new javax.swing.JButton();

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Uploader", "Created At"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl);

        btnView.setText("View Detail");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnView))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnView))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        Video selected = getSelected();
        if (selected == null) {
            return;
        }
        parent.pushComponent(new VideoDetail(parent, account, selected));
    }//GEN-LAST:event_btnViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables


    @Override
    public JTable getTable() {
        return tbl;
    }

    @Override
    public Object[] populateRow(Video video) {
        return new Object[] {
            video,
            video.getUploader(),
            video.getCreatedAt().getTime(),
        };
    }

    @Override
    public void populateTable() {
        Organization org = account.getOrg();
        VideoCatalog ctlg = org.getEnterprise().getNetwork().getVideoCatalog();
        Stream<Video> s = ctlg.getVideoArrayList().stream();
        if (account.getRole() instanceof UniversityDepartmentSupervisorRole) {
            s = s.filter(v -> v.getUploader().getOrg().equals(org) && v.getStatus().equals(Video.VideoStatus.Uploaded));
        } else {
            s = s.filter(v -> v.getStatus().equals(Video.VideoStatus.DSApproved));
        }
        populateTable(s);
    }

    @Override
    public String getTitle() {
        if (account.getRole() instanceof UniversityDepartmentSupervisorRole) {
            return String.format("Uploaded Videos in %s", account.getOrg());
        } else {
            return String.format("Uploaded Videos in %s", account.getOrg().getEnterprise());
        }
    }
}
